openapi: 3.0.3
info:
  version: 'latest'
  title: CashQuest

servers:
  - url: 'http://localhost:8080'
security:
  - BearerAuth: [ ]

paths:
  '/ping':
    get:
      security: [ ]
      tags:
        - Security
      summary: ping-pong
      operationId: ping
      responses:
        200:
          description: pong
          content:
            application/json:
              schema:
                type: string
                example: pong
        500:
          $ref: '#/components/responses/500'
  '/whoami':
    get:
      security: [ BearerAuth: [ ] ]
      tags:
        - User
      operationId: whoami
      responses:
        200:
          description: tells you who you are
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: '#/components/responses/500'
        429:
          $ref: "#/components/responses/400"
        500:
          $ref: '#/components/responses/500'
  '/token':
    post:
      security: [ ]
      tags:
        - Security
      operationId: getToken
      summary: Get authentication token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUser'
        required: true
      responses:
        200:
          description: The username and the authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticatedUser"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  '/user':
    get:
      security: [ BearerAuth: [ ] ]
      tags:
        - Users
      operationId: getCurrentUser
      summary: get the currently authenticated user
      responses:
        200:
          description: currently connected user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    post:
      tags:
        - Users
      operationId: createUser
      summary: Create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        200:
          description: The created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedUser"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Users
      operationId: crupdateUser
      security: [ BearerAuth: [ ] ]
      summary: create or update the current user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrupdateUser"
      responses:
        200:
          description: the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  '/user/transactions':
    get:
      tags:
        - UserTransactions
      operationId: getTransactions
      security: [ BearerAuth: [ ] ]
      summary: get all transactions
      responses:
        200:
          description: transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  '/user/transactions/{transaction_id}':
    get:
      tags:
        - UserTransactions
      operationId: getTransactionById
      security: [ BearerAuth: [ ] ]
      summary: get transaction by id
      parameters:
        - in: path
          name: transaction_id
          required: true
          description: transaction identifier
          schema:
            type: string
      responses:
        200:
          description: transactions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - UserTransactions
      parameters:
        - in: path
          name: transaction_id
          required: true
          description: transaction identifier
          schema:
            type: string
      operationId: crupdateTransaction
      security: [ BearerAuth: [ ] ]
      summary: creates or updates transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        200:
          description: transactions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  '/user/quest':
    put:
      tags:
        - Users
      summary: Update user quest status
      operationId: updateUserQuestStatus
      security: [ BearerAuth: []]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CreateQuestHistory"
        required: true
      responses:
        200:
          description: the updated quest statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestHistory"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  '/quest':
    get:
      tags:
        - Quests
      summary: Get current task to complete
      security: [ BearerAuth: []]
      parameters:
        - in: query
          name: actualLevel
          required: true
          description: The user's actual level
          schema:
            type: number
      responses:
        200:
          description: The actual quest to complete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quest"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  '/user/{userId}/quest/history':
    get:
      tags:
        - Users
      summary: Get list of quest done or not by the user
      security: [ BearerAuth: []]
      parameters:
        - in: path
          name: userId
          required: true
          description: The user's id
          schema:
            type: string
      responses:
        200:
          description: List of quests done or not by the current user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestHistory"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    Quest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        objectiveDescription:
          type: string
        amountObjective:
          type: number
        points:
          type: number
        requiredLevel:
          type: number
    CreateQuestHistory:
      type: object
      properties:
        id:
          type: string
        questId:
          type: string
        userId:
          type: string
        status:
          $ref: "#/components/schemas/QuestStatus"
    QuestHistory:
      type: object
      properties:
        id:
          type: string
        quest:
          $ref: "#/components/schemas/Quest"
        user:
          $ref: "#/components/schemas/User"
        status:
          $ref: "#/components/schemas/QuestStatus"
    QuestStatus:
      type: string
      enum:
        - PENDING
        - INPROGRESS
        - SUCCESS
        - FAILED
    User:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateUser"
      properties:
        level:
          type: integer
          format: int32
        balance:
          type: integer
          description: real balance times 100, the last two digits will place the decimal point
          format: int32
    Income:
      type: object
      properties:
        earningFrequency:
          $ref: "#/components/schemas/BudgetSavingMode"
        amount:
          type: integer
          description: real income times 100, the last two digits will place the decimal point
        savingTarget:
          type: integer
          description: describes how much percent of your income you want to save

    Transaction:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/TransactionType"
        amount:
          type: integer
          description: real amount times 100, the last two digits will place the decimal point
        reason:
          type: string
          description: reason of the transaction
    TransactionType:
      type: string
      enum:
        - INCOME
        - OUTCOME
    BudgetSavingMode:
      type: string
      enum:
        - MONTHLY
        - WEEKLY
        - DAILY
    CrupdateUser:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/CreatedUser"
        income:
          $ref: "#/components/schemas/Income"
    CreateUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        birthDate:
          type: string
          format: date
    CreatedUser:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        birthDate:
          type: string
          format: date
    Whoami:
      properties:
        id:
          type: string
        username:
          type: string
        birthDate:
          type: string
    AuthUser:
      properties:
        username:
          type: string
        password:
          type: string
    AuthenticatedUser:
      properties:
        username:
          type: string
        bearerToken:
          type: string
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests